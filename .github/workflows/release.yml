name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate brew-gomod.rb version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          TAG_VERSION="${{ github.ref_name }}"
          echo "Validating that brew-gomod.rb contains version $TAG_VERSION"
          
          # Check if the URL in brew-gomod.rb contains the current tag version
          if ! grep -q "archive/$TAG_VERSION.tar.gz" brew-gomod.rb; then
            echo "ERROR: brew-gomod.rb does not contain the correct version $TAG_VERSION"
            echo "Current content of brew-gomod.rb:"
            cat brew-gomod.rb
            echo ""
            echo "Expected URL should contain: archive/$TAG_VERSION.tar.gz"
            echo "Deleting tag $TAG_VERSION and failing the release..."
            
            # Configure git for the action
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            
            # Delete the tag locally and remotely
            git tag -d $TAG_VERSION || echo "Local tag deletion failed or tag already deleted"
            git push origin :refs/tags/$TAG_VERSION || echo "Remote tag deletion failed or tag already deleted"
            
            echo "Tag $TAG_VERSION has been deleted due to version mismatch."
            exit 1
          fi
          
          echo "âœ“ Version validation passed: brew-gomod.rb contains $TAG_VERSION"
        
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body: |
            Release ${{ github.ref_name }}
            
            ## Installation
            
            ```bash
            brew install cdzombak/gomod/brew-gomod
            ```
            
            ## Files
            - `brew-gomod`: The main brew command script
            - `brew-gomod.rb`: Homebrew formula file
          draft: false
          prerelease: false
          
      - name: Upload brew-gomod script
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./brew-gomod
          asset_name: brew-gomod
          asset_content_type: application/x-shellscript
          
      - name: Upload Homebrew formula
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./brew-gomod.rb
          asset_name: brew-gomod.rb
          asset_content_type: text/plain
